/**
 * The type of the state of an entity. Only for internal use.
 *
 * @internal
 */

import type { HassEntity } from "./deps.ts";

/**
 * The possible types for an entity's state.
 */
export enum StateType {
  /**
   * Numeric type.
   */
  Number,

  /**
   * String type.
   */
  String,
}

export type StateTypeToRealType<S> = S extends StateType.Number ? number
  : string;

/**
 * The base format of entity definitions that will be generated by the CLI.
 *
 * You only need to use this if you're defining custom helpers that need to get some types from the runtime.
 */
export type EntityDefinition = {
  [entityId: string]: {
    stateType: StateType;
    attributes: {
      [attributeId: string]: { attrType: StateType };
    };
  };
};

export type EntityStateType<
  Entities extends EntityDefinition,
  K extends keyof Entities,
> = StateTypeToRealType<Entities[K]["stateType"]>;

export type EntityAttributeStateType<
  Entities extends EntityDefinition,
  K extends keyof Entities,
  A extends keyof Entities[K]["attributes"],
> = StateTypeToRealType<Entities[K]["attributes"][A]["attrType"]>;

/**
 * The base format of service definitions that will be generated by the CLI.
 *
 * You only need to use this if you're defining custom helpers that need to get some types from the runtime.
 */
export type ServiceDefinition = {
  [fullServiceId: string]: {
    fields: {
      [fieldId: string]: unknown;
    };
  };
};

/**
 * Handler for when the state or of an entity changes.
 */

export type StateChangeHandler<T> = (
  /**
   * The new state of the entity.
   */
  state: T,
  extra: {
    /**
     * The previous state of the entity.
     */
    prevState: T;
  },
) => void;

export type EntityUpdateHandler = (
  /**
   * The new state of the entity.
   */
  entity: HassEntity,
) => void;

/**
 * Function to remove a listener.
 */
export type Remover = () => void;
